pack_rows("$\\beta_1 = 0.75$", 2, 2, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.00$", 3, 3, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.25$", 4, 4, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.50$", 5, 5, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("Overall Totals", 6, 7, label_row_css = "background-color: #e6e6e6;")
library(kableExtra)
# Criando os dados da tabela
df <- data.frame(
Size = c("500", "252", "180", "120", "90", "60", "Total"),
# Beta = 0.50
B50_FP = c(73, 36, 70, 71, 52, 0, 302),
B50_CR = c(43, 17, 70, 70, 35, 0, 235),
B50_Prop = c(0.59, 0.47, 1.00, 0.99, 0.67, "-", 0.78),
# Beta = 0.75
B75_FP = c(73, 36, 70, 72, 34, 2, 287),
B75_CR = c(44, 19, 70, 72, 17, 1, 223),
B75_Prop = c(0.60, 0.53, 1.00, 1.00, 0.50, 0.50, 0.78),
# Beta = 1.00
B100_FP = c(76, 33, 70, 72, 68, 0, 319),
B100_CR = c(43, 16, 70, 72, 17, 0, 218),
B100_Prop = c(0.57, 0.48, 1.00, 1.00, 0.25, "-", 0.68),
# Beta = 1.25
B125_FP = c(71, 37, 70, 71, 37, 1, 287),
B125_CR = c(41, 20, 70, 70, 18, 0, 219),
B125_Prop = c(0.58, 0.54, 1.00, 0.99, 0.49, 0.00, 0.76),
# Beta = 1.50
B150_FP = c(75, 35, 72, 71, 17, 0, 270),
B150_CR = c(45, 17, 72, 70, 0, 0, 204),
B150_Prop = c(0.60, 0.49, 1.00, 0.99, 0.00, "-", 0.76),
# Overall Totals
Total_FP = c(368, 177, 352, 357, 208, 3, 1465),
Total_CR = c(216, 89, 352, 354, 87, 1, 1099),
Total_Prop = c(0.587, 0.503, 1.00, 0.99, 0.418, 0.33, 0.75)
)
# Definindo as linhas para destacar (a cada 5)
highlight_rows <- c(5)  # Apenas a linha 5 neste caso, já que temos apenas 7 linhas
# Definindo as linhas para destacar (a cada 5)
highlight_rows <- c(5)  # Apenas a linha 5 neste caso, já que temos apenas 7 linhas
# Criando a tabela kable com expressões LaTeX
kable(
df,
caption = "Performance of the Bayesian method in correctly rejecting false positives",
align = c("l", rep("r", 21)),
booktabs = TRUE,
escape = FALSE
) %>%
kable_styling(font_size = 9, latex_options = "scale_down") %>%
add_header_above(c(" " = 1,
"$\\beta_1 = 0.50$" = 3,
"$\\beta_1 = 0.75$" = 3,
"$\\beta_1 = 1.00$" = 3,
"$\\beta_1 = 1.25$" = 3,
"$\\beta_1 = 1.50$" = 3,
"Overall Totals" = 3), escape = FALSE) %>%
add_header_above(c(" " = 1, "Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1)) %>%
column_spec(1, bold = TRUE) %>%
row_spec(highlight_rows, background = "#f7f7f7") %>%  # Destaca apenas a linha 5
pack_rows("$\\beta_1 = 0.50$", 1, 1, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 0.75$", 2, 2, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.00$", 3, 3, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.25$", 4, 4, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.50$", 5, 5, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("Overall Totals", 6, 7, label_row_css = "background-color: #e6e6e6;")
library(knitr)
library(kableExtra)
# Criando o dataframe com os dados
tabela <- data.frame(
Beta1 = c(rep(0.50, 3), rep(0.75, 3), rep(1.00, 3), rep(1.25, 3), rep(1.50, 3), rep("Overall", 3)),
Metric = rep(c("Cointegration False Positives", "Correctly Rejected", "Proportion"), 6),
`500` = c(73,43,0.59, 73,44,0.60, 76,43,0.57, 71,41,0.58, 75,45,0.60, 368,216,0.587),
`252` = c(36,17,0.47, 36,19,0.53, 33,16,0.48, 37,20,0.54, 35,17,0.49, 177,89,0.503),
`180` = c(70,70,1.00, 70,70,1.00, 70,70,1.00, 70,70,1.00, 72,72,1.00, 352,352,1.00),
`120` = c(71,70,0.99, 72,72,1.00, 72,72,1.00, 71,70,0.99, 71,70,0.99, 357,354,0.99),
`90`  = c(52,35,0.67, 34,17,0.50, 68,17,0.25, 37,18,0.49, 17,0,0.00, 208,87,0.418),
`60`  = c(0,0,"-", 2,1,0.50, 0,0,"-", 1,0,0.00, 0,0,"-", 3,1,0.33),
Total = c(302,235,0.78, 287,223,0.78, 319,218,0.68, 287,219,0.76, 270,204,0.76, 1465,1099,0.75)
)
# Gerando a tabela kable
tabela %>%
kable("latex", booktabs = TRUE, caption = "Performance of the Bayesian method in correctly rejecting false positives.") %>%
kable_styling(latex_options = c("hold_position", "scale_down")) %>%
pack_rows("$\\beta_1 = 0.50$", 1, 3) %>%
pack_rows("$\\beta_1 = 0.75$", 4, 6) %>%
pack_rows("$\\beta_1 = 1.00$", 7, 9) %>%
pack_rows("$\\beta_1 = 1.25$", 10, 12) %>%
pack_rows("$\\beta_1 = 1.50$", 13, 15) %>%
pack_rows("Overall Totals", 16, 18)
install.packages("xaringan")
install.packages("xaringan")
install.packages("rmarkdown")
install.packages("rmarkdown")
# Carregar as bibliotecas necessárias
library(dplyr)
library(quantmod)
library(DBI)
library(RSQLite)
# Definir o período de coleta de dados
start_date <- as.Date("2023-06-01")  # Data inicial
end_date <- Sys.Date()                # Data final é hoje
# Obter os dados do Yahoo Finance
tickers <- c("AAPL", "MSFT", "NVDA", "AMZN", "GOOG", "LLY", "AVGO", "JPM", "TSLA", "KO", "PEP")  # Adicione os tickers desejados
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)
# Preparar os dados
daily_data_list <- lapply(tickers, function(ticker) {
data <- data.frame(Date = index(get(ticker)), Price = as.numeric(Cl(get(ticker))))
colnames(data)[2] <- paste0(ticker, ".NAS")  # Renomear a coluna para o formato desejado
return(data)
})
# Juntar os dados em um único dataframe
combined_data <- daily_data_list[[1]]
for (i in 2:length(daily_data_list)) {
combined_data <- left_join(combined_data, daily_data_list[[i]], by = "Date")
}
# Formatando para o formato desejado (incluir coluna 'time')
combined_data <- combined_data %>%
rename(time = Date) %>%
mutate(time = as.POSIXct(time))  # Certificando-se de que o tipo de 'time' esteja correto
# Visualizar os dados formatados
head(combined_data)
sp500.d1 <- combined_data %>%
select(time, KO.NAS, PEP.NAS) %>%
mutate(time = 1:length(time))
nue.nyse_mar.nas_d1 <- sp500.d1
library(plotly)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#df <- txhousing
library(tidyr)
fig <- nue.nyse_mar.nas_d1 %>%
select(time, 1:3) %>%
mutate(KO.NAS = log(KO.NAS), PEP.NAS = log(PEP.NAS)- 0.6) %>%
pivot_longer(!time, names_to = "stock", values_to = "price") #%>%
#filter(year > 2005, city %in% c("Abilene", "Bay Area"))
fig <- fig %>% accumulate_by(~time)
fig <- fig %>%
plot_ly(
x = ~time,
y = ~price,
split = ~stock,
frame = ~frame,
type = 'scatter',
mode = 'lines',
showlegend = FALSE
# line = list(simplyfy = F),
# # line = list(color = c("red", "green"))  # Definir as cores aqui
# color = ~stock,
# colors = c("#602d89", "gray")
) %>%
# se nao for com add_trace, fica um objeto de mais de 2Gb
# com add-trace fica apenas 12Mb
add_trace(data = fig[fig$stock == "KO.NAS", ],
y = ~price,
# line = list(color = "#602d89"),
line = list(color = "#00aca0"),
name = "KO.NAS",
showlegend = TRUE) %>%
add_trace(data = fig[fig$stock == "PEP.NAS", ],
y = ~price,
line = list(color = "gray"),
name = "PEP.NAS",
showlegend = TRUE)
fig <- fig %>% layout(
xaxis = list(
title = "Date/Time",
zeroline = F,
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
showticklabels=FALSE
),
yaxis = list(
title = "Log Price",
zeroline = F
),
#margin=m,
autosize = F, width = 900, height = 510
#paper_bgcolor = "lightblue"
)
fig <- fig %>% animation_opts(
frame = 50,
transition = 0,
redraw = FALSE
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "left", y = 0, yanchor = "bottom"
)
fig
saveRDS(object=fig, file="plotly_LS3.rds")
# Definir o período de coleta de dados
start_date <- as.Date("2023-06-01")  # Data inicial
end_date <- as.Date("2024-06-01")
# Obter os dados do Yahoo Finance
tickers <- c("AAPL", "MSFT", "NVDA", "AMZN", "GOOG", "LLY", "AVGO", "JPM", "TSLA", "KO", "PEP")  # Adicione os tickers desejados
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)
# Preparar os dados
daily_data_list <- lapply(tickers, function(ticker) {
data <- data.frame(Date = index(get(ticker)), Price = as.numeric(Cl(get(ticker))))
colnames(data)[2] <- paste0(ticker, ".NAS")  # Renomear a coluna para o formato desejado
return(data)
})
# Juntar os dados em um único dataframe
combined_data <- daily_data_list[[1]]
for (i in 2:length(daily_data_list)) {
combined_data <- left_join(combined_data, daily_data_list[[i]], by = "Date")
}
# Formatando para o formato desejado (incluir coluna 'time')
combined_data <- combined_data %>%
rename(time = Date) %>%
mutate(time = as.POSIXct(time))  # Certificando-se de que o tipo de 'time' esteja correto
# Visualizar os dados formatados
head(combined_data)
sp500.d1 <- combined_data %>%
select(time, KO.NAS, PEP.NAS) %>%
mutate(time = 1:length(time))
nue.nyse_mar.nas_d1 <- sp500.d1
library(plotly)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#df <- txhousing
library(tidyr)
fig <- nue.nyse_mar.nas_d1 %>%
select(time, 1:3) %>%
mutate(KO.NAS = log(KO.NAS), PEP.NAS = log(PEP.NAS)- 0.6) %>%
pivot_longer(!time, names_to = "stock", values_to = "price") #%>%
#filter(year > 2005, city %in% c("Abilene", "Bay Area"))
fig <- fig %>% accumulate_by(~time)
fig <- fig %>%
plot_ly(
x = ~time,
y = ~price,
split = ~stock,
frame = ~frame,
type = 'scatter',
mode = 'lines',
showlegend = FALSE
# line = list(simplyfy = F),
# # line = list(color = c("red", "green"))  # Definir as cores aqui
# color = ~stock,
# colors = c("#602d89", "gray")
) %>%
# se nao for com add_trace, fica um objeto de mais de 2Gb
# com add-trace fica apenas 12Mb
add_trace(data = fig[fig$stock == "KO.NAS", ],
y = ~price,
# line = list(color = "#602d89"),
line = list(color = "#00aca0"),
name = "KO.NAS",
showlegend = TRUE) %>%
add_trace(data = fig[fig$stock == "PEP.NAS", ],
y = ~price,
line = list(color = "gray"),
name = "PEP.NAS",
showlegend = TRUE)
fig <- fig %>% layout(
xaxis = list(
title = "Date/Time",
zeroline = F,
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
showticklabels=FALSE
),
yaxis = list(
title = "Log Price",
zeroline = F
),
#margin=m,
autosize = F, width = 900, height = 510
#paper_bgcolor = "lightblue"
)
fig <- fig %>% animation_opts(
frame = 50,
transition = 0,
redraw = FALSE
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "left", y = 0, yanchor = "bottom"
)
fig
# Definir o período de coleta de dados
start_date <- as.Date("2022-06-01")  # Data inicial
end_date <- Sys.Date()                # Data final é hoje
end_date <- as.Date("2023-06-01")
# Obter os dados do Yahoo Finance
tickers <- c("AAPL", "MSFT", "NVDA", "AMZN", "GOOG", "LLY", "AVGO", "JPM", "TSLA", "KO", "PEP")  # Adicione os tickers desejados
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)
# Preparar os dados
daily_data_list <- lapply(tickers, function(ticker) {
data <- data.frame(Date = index(get(ticker)), Price = as.numeric(Cl(get(ticker))))
colnames(data)[2] <- paste0(ticker, ".NAS")  # Renomear a coluna para o formato desejado
return(data)
})
# Juntar os dados em um único dataframe
combined_data <- daily_data_list[[1]]
for (i in 2:length(daily_data_list)) {
combined_data <- left_join(combined_data, daily_data_list[[i]], by = "Date")
}
# Formatando para o formato desejado (incluir coluna 'time')
combined_data <- combined_data %>%
rename(time = Date) %>%
mutate(time = as.POSIXct(time))  # Certificando-se de que o tipo de 'time' esteja correto
# Visualizar os dados formatados
head(combined_data)
sp500.d1 <- combined_data %>%
select(time, KO.NAS, PEP.NAS) %>%
mutate(time = 1:length(time))
nue.nyse_mar.nas_d1 <- sp500.d1
library(plotly)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#df <- txhousing
library(tidyr)
fig <- nue.nyse_mar.nas_d1 %>%
select(time, 1:3) %>%
mutate(KO.NAS = log(KO.NAS), PEP.NAS = log(PEP.NAS)- 0.6) %>%
pivot_longer(!time, names_to = "stock", values_to = "price") #%>%
#filter(year > 2005, city %in% c("Abilene", "Bay Area"))
fig <- fig %>% accumulate_by(~time)
fig <- fig %>%
plot_ly(
x = ~time,
y = ~price,
split = ~stock,
frame = ~frame,
type = 'scatter',
mode = 'lines',
showlegend = FALSE
# line = list(simplyfy = F),
# # line = list(color = c("red", "green"))  # Definir as cores aqui
# color = ~stock,
# colors = c("#602d89", "gray")
) %>%
# se nao for com add_trace, fica um objeto de mais de 2Gb
# com add-trace fica apenas 12Mb
add_trace(data = fig[fig$stock == "KO.NAS", ],
y = ~price,
# line = list(color = "#602d89"),
line = list(color = "#00aca0"),
name = "KO.NAS",
showlegend = TRUE) %>%
add_trace(data = fig[fig$stock == "PEP.NAS", ],
y = ~price,
line = list(color = "gray"),
name = "PEP.NAS",
showlegend = TRUE)
fig <- fig %>% layout(
xaxis = list(
title = "Date/Time",
zeroline = F,
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
showticklabels=FALSE
),
yaxis = list(
title = "Log Price",
zeroline = F
),
#margin=m,
autosize = F, width = 900, height = 510
#paper_bgcolor = "lightblue"
)
fig <- fig %>% animation_opts(
frame = 50,
transition = 0,
redraw = FALSE
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "left", y = 0, yanchor = "bottom"
)
fig
saveRDS(object=fig, file="plotly_LS3.rds")
# Carregar as bibliotecas necessárias
library(dplyr)
library(quantmod)
library(DBI)
library(RSQLite)
# Definir o período de coleta de dados
start_date <- as.Date("2022-06-01")  # Data inicial
end_date <- Sys.Date()                # Data final é hoje
end_date <- as.Date("2023-06-01")
# Obter os dados do Yahoo Finance
tickers <- c("AAPL", "MSFT", "NVDA", "AMZN", "GOOG", "LLY", "AVGO", "JPM", "TSLA", "KO", "PEP")  # Adicione os tickers desejados
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)
# Preparar os dados
daily_data_list <- lapply(tickers, function(ticker) {
data <- data.frame(Date = index(get(ticker)), Price = as.numeric(Cl(get(ticker))))
colnames(data)[2] <- paste0(ticker, ".NAS")  # Renomear a coluna para o formato desejado
return(data)
})
# Juntar os dados em um único dataframe
combined_data <- daily_data_list[[1]]
for (i in 2:length(daily_data_list)) {
combined_data <- left_join(combined_data, daily_data_list[[i]], by = "Date")
}
# Formatando para o formato desejado (incluir coluna 'time')
combined_data <- combined_data %>%
rename(time = Date) %>%
mutate(time = as.POSIXct(time))  # Certificando-se de que o tipo de 'time' esteja correto
# Visualizar os dados formatados
head(combined_data)
sp500.d1 <- combined_data %>%
select(time, KO.NAS, PEP.NAS) %>%
mutate(time = 1:length(time))
nue.nyse_mar.nas_d1 <- sp500.d1
library(plotly)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#df <- txhousing
library(tidyr)
fig <- nue.nyse_mar.nas_d1 %>%
select(time, 1:3) %>%
mutate(KO.NAS = log(KO.NAS), PEP.NAS = log(PEP.NAS)- 0.6) %>%
pivot_longer(!time, names_to = "stock", values_to = "price") #%>%
#filter(year > 2005, city %in% c("Abilene", "Bay Area"))
fig <- fig %>% accumulate_by(~time)
fig <- fig %>%
plot_ly(
x = ~time,
y = ~price,
split = ~stock,
frame = ~frame,
type = 'scatter',
mode = 'lines',
showlegend = FALSE
# line = list(simplyfy = F),
# # line = list(color = c("red", "green"))  # Definir as cores aqui
# color = ~stock,
# colors = c("#602d89", "gray")
) %>%
# se nao for com add_trace, fica um objeto de mais de 2Gb
# com add-trace fica apenas 12Mb
add_trace(data = fig[fig$stock == "KO.NAS", ],
y = ~price,
# line = list(color = "#602d89"),
line = list(color = "#00aca0"),
name = "KO",
showlegend = TRUE) %>%
add_trace(data = fig[fig$stock == "PEP.NAS", ],
y = ~price,
line = list(color = "gray"),
name = "PEP",
showlegend = TRUE)
fig <- fig %>% layout(
xaxis = list(
title = "Date/Time",
zeroline = F,
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
showticklabels=FALSE
),
yaxis = list(
title = "Log Price",
zeroline = F
),
#margin=m,
autosize = F, width = 900, height = 510
#paper_bgcolor = "lightblue"
)
fig <- fig %>% animation_opts(
frame = 50,
transition = 0,
redraw = FALSE
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "left", y = 0, yanchor = "bottom"
)
fig
saveRDS(object=fig, file="plotly_LS3.rds")
<!-- ###<font color =#4C5455><code>What is (statistical) arbitrage?</code></font> -->
