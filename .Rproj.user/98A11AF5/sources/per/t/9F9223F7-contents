# Set seed for reproducibility
set.seed(123)

# Function to create the distribution plot with different alpha values using base R
create_beta1_distribution_plot_base_r <- function(alpha_small = 0.05, alpha_large = 0.15) {
  # Configurar o dispositivo gráfico com 3 regiões: gráfico superior, legenda, gráfico inferior
  # Salvar parâmetros gráficos originais
  old_par <- par(no.readonly = TRUE)
  
  # Definir as margens externas (outer margins) para acomodar o título geral
  par(oma = c(0, 0, 3, 0))  # Adiciona 3 linhas de margem no topo para o título geral
  
  # Configurar layout com 3 painéis: gráfico superior, legenda, gráfico inferior
  layout(matrix(c(1, 2, 3), nrow = 3, ncol = 1), heights = c(4, 0.5, 4))
  
  # Configurar margens para o gráfico superior
  par(mar = c(4, 4, 5, 5) + 0.9)
  
  # Create a sequence for x values of the truncated normal distribution (β₁ > 0)
  x <- seq(0, 4, length.out = 1000)
  
  # Calculate truncated normal distribution values
  # Density function for truncated normal (μ = 0, σ = 1, lower bound = 0)
  truncated_normal <- function(x, mean = 0, sd = 1) {
    # For x > 0, the density is 2*dnorm(x) to account for truncation
    2 * dnorm(x, mean, sd)
  }
  
  y <- truncated_normal(x)
  
  # Calculate quantiles for different alpha values
  # For truncated normal, we need to adjust the quantiles to reflect β₁ > 0
  # These are custom values to demonstrate the concept visually
  q_small_low <- qnorm(alpha_small*2, 0, 1) # Adjust for truncation
  q_small_high <- qnorm(1 - alpha_small/2, 0, 1) # Adjust for truncation
  q_large_low <- qnorm(alpha_large*2, 0, 1) # Adjust for truncation
  q_large_high <- qnorm(1 - alpha_large/2, 0, 1) # Adjust for truncation
  
  # Make sure lower quantiles are positive for the truncated normal
  q_small_low <- max(0.1, q_small_low)
  q_large_low <- max(0.3, q_large_low)
  
  # First plot (smaller alpha)
  # plot(x, y, type = "n", xlab = expression(paste("Values of ", beta[1])), ylab = "Density",
  #      main = bquote(paste(alpha, " = ", .(alpha_small))),
  #      cex.main = 2.6, cex.lab = 2, font.main = 2, bty = "n", xaxt = "n")
  
  plot(x, y, type = "n", xlab = "", ylab = "Density",
       main = bquote(paste(alpha, " = ", .(alpha_small))),
       cex.main = 2.6, cex.lab = 2, font.main = 2, bty = "n", xaxt = "n")
  
  # Add subtitle
  mtext("Wider well-behaved region \n(less selective entry, more selective exit)", 
        side = 3, line = -7.5, at = 3, cex = 1.4, font = 3)
  
  # Fill the well-behaved region (middle area)
  # For truncated normal, lower bound is 0
  lower_bound <- max(0, q_small_low)
  x_middle <- x[x >= lower_bound & x <= q_small_high]
  y_middle <- y[x >= lower_bound & x <= q_small_high]
  
  # Draw hatched orange area for well-behaved region
  # First, fill with solid very light orange
  polygon(c(x_middle[1], x_middle, x_middle[length(x_middle)]), 
          c(0, y_middle, 0), col = rgb(0.9, 0.9, 1), border = NA)
  
  par(xpd = TRUE)
  arrows(x0 = 2.2, y0 = 0.57, x1 = 1.5, y1 = 0.45, 
         length = 0.15, angle = 20, code = 2, 
         lwd = 2, col = "black")
  par(xpd = FALSE)
  
  # Then add hatching with orange lines
  if (length(x_middle) > 10) {
    # Calculate interval between lines based on region width
    region_width <- q_small_high - lower_bound
    line_interval <- region_width / 15  # 15 lines in the region
    
    # Draw diagonal orange lines for hatching
    for (i in seq(lower_bound, q_small_high, by = line_interval)) {
      # Get max height at this x position
      height_idx <- which.min(abs(x - i))
      max_height <- y[height_idx]
      
      # Draw the line
      lines(c(i, i), c(0, max_height), col = "blue", lty = 1, lwd = 1)
    }
  }
  
  # For truncated normal, only show buy signal if q_small_low > 0
  if (q_small_low > 0) {
    x_left <- x[x < q_small_low & x >= 0]
    y_left <- y[x < q_small_low & x >= 0]
    if (length(x_left) > 0) {
      # Fill with light gray instead of light red
      polygon(c(x_left[1], x_left, x_left[length(x_left)]), 
              c(0, y_left, 0), col = rgb(0.9, 0.9, 0.9), border = NA)
    }
  }
  
  # Fill the sell signal region (right area) with light gray
  x_right <- x[x > q_small_high]
  y_right <- y[x > q_small_high]
  polygon(c(x_right[1], x_right, x_right[length(x_right)]), 
          c(0, y_right, 0), col = rgb(0.9, 0.9, 0.9), border = NA)
  
  # Add the distribution curve
  lines(x, y, lwd = 2)
  
  # Add vertical lines for quantiles - update color
  abline(v = q_small_low, lty = 2, col = "gray40", lwd = 2)
  abline(v = q_small_high, lty = 2, col = "gray40", lwd = 2)
  
  # Add colored regions along the x-axis to highlight different zones - make thicker
  add_color_highlight <- function(x_start, x_end, color) {
    # Create a thicker rectangular region
    rect(x_start, -0.04, x_end, 0, col = color, border = NA)
  }
  
  # Add the colored highlights for the different regions
  if (q_small_low > 0) {
    # Buy signal region (left)
    add_color_highlight(0, q_small_low, "gray40")
  }
  
  # Well-behaved region (middle)
  add_color_highlight(max(0, q_small_low), q_small_high, "blue")
  
  # Sell signal region (right)
  add_color_highlight(q_small_high, 4, "gray40")
  
  # Add quantile labels - placed below x-axis
  if (q_small_low > 0) {
    # Draw vertical line at lower quantile
    lines(c(q_small_low, q_small_low), c(0, 0.05), col = "gray40", lty = 2, lwd = 1.5)
    # Add label below the axis - use xpd=TRUE to allow drawing outside the plot region
    par(xpd = TRUE)
    text(q_small_low, -0.03, bquote(paste("q"[alpha], " = q"[.(alpha_small)])), 
         cex = 2.2, col = "black", pos = 1)
    par(xpd = FALSE)
  }
  
  # Draw vertical line at upper quantile
  lines(c(q_small_high, q_small_high), c(0, 0.05), col = "gray40", lty = 2, lwd = 1.5)
  # Add label below the axis
  par(xpd = TRUE)
  text(q_small_high, -0.03, bquote(paste("q"[1-alpha], " = q"[.(1-alpha_small)])), 
       cex = 2.2, col = "black", pos = 1)
  par(xpd = FALSE)
  
  # Painel central para a legenda
  # Configurar margens mínimas para o painel da legenda
  par(mar = c(0, 0, 0, 0))
  
  # Criar um plot vazio para a legenda
  plot(0, 0, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(0, 1), ylim = c(0, 1))
  
  # Adicionar a legenda centralizada
  legend("center", 
         legend = c(
           expression(paste("well-behaved ", beta[1], " interval (confirmatory region for entry signals)")),
           expression(paste("ill-behaved ", beta[1], " interval (confirmatory region for stop-loss signals)"))
         ),
         fill = c("blue", "gray40"),
         border = NA,
         bty = "n",
         cex = 1.82,
         pt.cex = 10,
         horiz = FALSE)
  
  # Configurar margens para o gráfico inferior - adicionando espaço para o eixo x
  par(mar = c(3, 4, 5, 5) + 1)
  
  # Second plot (larger alpha)
  plot(x, y, type = "n", xlab = expression(paste("Values of ", beta[1])), ylab = "Density",
       main = bquote(paste(alpha, " = ", .(alpha_large))), 
       cex.main = 2.6, cex.lab = 2, font.main = 2, bty = "n", xaxt = "n")
  
  # Add subtitle
  mtext("Narrower well-behaved region \n(more selective entry, less selective exit)", 
        side = 3, line = -7.5, at = 2.5, cex = 1.4, font = 3)
  
  # Fill the well-behaved region (middle area) with hatched orange
  lower_bound <- max(0, q_large_low)
  x_middle <- x[x >= lower_bound & x <= q_large_high]
  y_middle <- y[x >= lower_bound & x <= q_large_high]
  
  # First, fill with solid very light orange
  polygon(c(x_middle[1], x_middle, x_middle[length(x_middle)]), 
          c(0, y_middle, 0), col = rgb(0.9, 0.9, 1), border = NA)
  
  par(xpd = TRUE)
  arrows(x0 = 1.63, y0 = 0.57, x1 = 1.25, y1 = 0.52, 
         length = 0.15, angle = 20, code = 2, 
         lwd = 2, col = "black")
  par(xpd = FALSE)
  
  # Then add hatching with orange lines
  if (length(x_middle) > 10) {
    # Calculate interval between lines based on region width
    region_width <- q_large_high - lower_bound
    line_interval <- region_width / 15  # 15 lines in the region
    
    # Draw vertical orange lines for hatching
    for (i in seq(lower_bound, q_large_high, by = line_interval)) {
      # Get max height at this x position
      height_idx <- which.min(abs(x - i))
      max_height <- y[height_idx]
      
      # Draw the line
      lines(c(i, i), c(0, max_height), col = "blue", lty = 1, lwd = 1)
    }
  }
  
  # For truncated normal, only show buy signal if q_large_low > 0
  if (q_large_low > 0) {
    x_left <- x[x < q_large_low & x >= 0]
    y_left <- y[x < q_large_low & x >= 0]
    if (length(x_left) > 0) {
      # Fill with light gray instead of light red
      polygon(c(x_left[1], x_left, x_left[length(x_left)]), 
              c(0, y_left, 0), col = rgb(0.9, 0.9, 0.9), border = NA)
    }
  }
  
  # Fill the sell signal region (right area) with light gray
  x_right <- x[x > q_large_high]
  y_right <- y[x > q_large_high]
  polygon(c(x_right[1], x_right, x_right[length(x_right)]), 
          c(0, y_right, 0), col = rgb(0.9, 0.9, 0.9), border = NA)
  
  # Add the distribution curve
  lines(x, y, lwd = 2)
  
  # Add vertical lines for quantiles - update color
  abline(v = q_large_low, lty = 2, col = "gray40", lwd = 2)
  abline(v = q_large_high, lty = 2, col = "gray40", lwd = 2)
  
  # Add colored regions along the x-axis for the second plot too
  if (q_large_low > 0) {
    # Buy signal region (left)
    add_color_highlight(0, q_large_low, "gray40")
  }
  
  # Well-behaved region (middle)
  add_color_highlight(max(0, q_large_low), q_large_high, "blue")
  
  # Sell signal region (right)
  add_color_highlight(q_large_high, 4, "gray40")
  
  # Add quantile labels below x-axis for second plot
  if (q_large_low > 0) {
    # Draw vertical line at lower quantile
    lines(c(q_large_low, q_large_low), c(0, 0.05), col = "gray40", lty = 2, lwd = 1.5)
    # Add label below the axis
    par(xpd = TRUE)
    text(q_large_low, -0.03, bquote(paste("q"[alpha], " = q"[.(alpha_large)])), 
         cex = 2.2, col = "black", pos = 1)
    par(xpd = FALSE)
  }
  
  # Draw vertical line at upper quantile
  lines(c(q_large_high, q_large_high), c(0, 0.05), col = "gray40", lty = 2, lwd = 1.5)
  # Add label below the axis
  par(xpd = TRUE)
  text(q_large_high, -0.03, bquote(paste("q"[1-alpha], " = q"[.(1-alpha_large)])), 
       cex = 2.2, col = "black", pos = 1)
  par(xpd = FALSE)
  
  # Add two-line title with atop()
  # mtext(expression(atop("Quantile Parameter " * alpha * " and 'Well-behaved' Intervals",
  #                       "under the Full Conditional of " * beta[1])),
  #       side = 3, line = -2.3, outer = TRUE, cex = 1.7, font = 2)
  mtext(expression(atop("Full Conditional Distribution of " * beta[1])),
        side = 3, line = -2.3, outer = TRUE, cex = 1.7, font = 2)
  
  # Reset to default
  par(old_par)
}

# Exemplo de uso
create_beta1_distribution_plot_base_r(alpha_small = 0.05, alpha_large = 0.15)